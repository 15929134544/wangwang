回顾：
列表推导式：
[表达式]

[表达式 for 变量 in 列表]

[x+2 for x in list]---->新的列表

1、[表达式 for 变量 in 列表 if 条件]
    [x+2 for x in list if x%2==0]

2、[结果A if 条件 else 结果B for 变量 in 列表 if 条件]
条件为真，结果A，否则为结果B
    [x+2 if x%2==0 else x+1 for x in list]



集合推导式：{表达式 for 变量 in 列表 if 条件}---->类似列表推导式，但是没有重复元素
字典推导式：{key value for k, v in 字典.items() }


生成器：generator   为了节省内存

创建生成器的方式
1、使用类似的列表推导式
g =  (表达式 for 变量 in 列表)
    此时的g就是生成器

2、函数+yield

def func():
    ...
    yield
    ...

g = func()
得到里面的元素：

    调用系统的函数：next(g)

    生成器里面自带的两个函数：__next()__     send(None),send(e)


可迭代的与迭代器：
1、生成器是可迭代的
2、字符串、列表、集合是可迭代的...


判断是否可迭代     Iterable
isinstance(x, Iterable)------>True(可迭代的)


生成器就是一个迭代器，-------->通过调用next(g)得到下一个元素

列表不是迭代器，但是可以通过next(iter(list))------>变成一个迭代器


面向对象：

类：由多个对象提取出来的共同的特征，封装成一个类

类的定义:
class 类名：
    特征：类属性

    动作：类方法


创建实例/对象

对象名 = 类名（）

