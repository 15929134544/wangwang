# 用栈实现队列



[https://leetcode-cn.com/problems/implement-queue-using-stacks/]()



思路一：

​	这里没有使用栈，而是使用python里面的列表

​	使用列表的pop功能，可以根据索引pop出对应的元素

`class MyQueue:



  def __init__(self):

​    """

​    Initialize your data structure here.

​    """

​    self.stack1 = []

​    



  def push(self, x: int) -> None:

​    """

​    Push element x to the back of queue.

​    """

​    self.stack1.append(x)





  def pop(self) -> int:

​    """

​    Removes the element from in front of queue and returns that element.

​    """

​    if not self.stack1:

​      return None

​    return self.stack1.pop(0)





  def peek(self) -> int:

​    """

​    Get the front element.

​    """

​    if not self.stack1:

​      return None

​    return self.stack1[0]





  def empty(self) -> bool:

​    """

​    Returns whether the queue is empty.

​    """

​    if not self.stack1:

​      return True

​    return False





\# Your MyQueue object will be instantiated and called as such:

\# obj = MyQueue()

\# obj.push(x)

\# param_2 = obj.pop()

\# param_3 = obj.peek()

\# param_4 = obj.empty()`



思路二：

​	使用两个栈，一个栈用来push元素，另一个栈用来pop元素

​	使用栈先进后出的特性来实现先进先出的队列



​	进队列即将元素push进栈即可

​	出队即将入栈里面的元素全都出栈并压进另一个栈中，此时必须将入栈中的元素全部出栈

​	在向另一个栈压栈时，必须保证这个栈为空



`class MyQueue:



  def __init__(self):

​    """

​    Initialize your data structure here.

​    """

​    self.stackPush = []

​    self.stackPop = []





  def push(self, x: int) -> None:

​    """

​    Push element x to the back of queue.

​    """

​    self.stackPush.append(x)





  def pop(self) -> int:

​    """

​    Removes the element from in front of queue and returns that element.

​    """

​    if not self.stackPop:

​      while self.stackPush:

​        self.stackPop.append(self.stackPush.pop())

​    return self.stackPop.pop()



  def peek(self) -> int:

​    """

​    Get the front element.

​    """

​    if not self.stackPop:

​      while self.stackPush:

​        self.stackPop.append(self.stackPush.pop())

​    return self.stackPop[-1]

​    



  def empty(self) -> bool:

​    """

​    Returns whether the queue is empty.

​    """

​    if not self.stackPush and not self.stackPop:

​      return True

​    return False





\# Your MyQueue object will be instantiated and called as such:

\# obj = MyQueue()

\# obj.push(x)

\# param_2 = obj.pop()

\# param_3 = obj.peek()

\# param_4 = obj.empty()`



​	
